<?php

namespace DummyNamespace;

use Illuminate\Database\Eloquent\Model;

class DummyClass extends Model
{
    protected $table = 'DummyTableName';
    public $tableComments = 'DummyTableComments';
    protected $guarded = [];
    
    /**
     * Validator rules
     * @param type $on
     * @return type
     */
    public function rules()
    {
        return [DummyRules
        ];
    }

    /**
     * Validator messages
     * @return type
     */
    public function messages()
    {
        return [];
    }
    
    /**
     * Validator customAttributes
     * @return type
     */
    public function customAttributes()
    {
        return [DummyAttributes
        ];
    }
    
    public function getAttributeLabel($key)
    {
        $datas = $this->customAttributes();
        return $datas[$key] ?? $key;
    }
    
    /**
     * Filter Request Attributes and Retain only customAttributes
     * @param array $data
     * @param type $append_except
     * @return type
     */
    public function onlyCustomAttributes(array $data, array $append_except = [])
    {
        foreach ($data as $key => $val)
        {
            if ($val === null)
            {
                unset($data[$key]);
            }
        }
        $except = array_merge_recursive($append_except, ['id', 'created_at', 'updated_at', 'deleted_at']);
        $attributes = $this->customAttributes();
        return collect($data)->except($except)->only(array_keys($attributes))->toArray();
    }
    
    /**
     * Fill the model with an array of attributes.
     * @param type $attributes
     * @param type $append_except
     * @return $this
     */
    public function fill($attributes, array $append_except = [])
    {
        $onlyCustomAttributes = $this->onlyCustomAttributes($attributes, $append_except);
        parent::fill($onlyCustomAttributes);
        return $this;
    }
}
