<?php

namespace DummyNamespace;

use Illuminate\Http\Request;
use DummyRootNamespaceHttp\Controllers\Controller;
use Illuminate\Support\Facades\Validator;
use Illuminate\Validation\Rule;
use DummyFullModelClass;

class DummyClass extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        $model = DummyModelClass::orderBy($request->input('sort', 'DummyPrimaryKeyName'), $request->input('sortBy', 'DESC'));
        DummySearchCondition
        if(isset($request->page) && $request->page <= 0){
            $rows = $model->limit(10)->get();
        }else{
            $rows = $model->paginate();
        }
        //$rows->makeHidden(['updated_at']);
        return ['code' => 200, 'msg' => __('common.Success'), 'data' => $rows];
    }

    /**
     * Display the specified resource.
     *
     * @param  \DummyFullModelClass  $DummyModelVariable
     * @return \Illuminate\Http\Response
     */
    public function show(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'id' => ['required', 'integer', Rule::exists('DummyTableName')],
        ]);
        if ($validator->fails()) {
            return ['code' => 40001, 'msg' => $validator->errors()->first(), 'data' => $validator->errors()];
        }
        $model = DummyModelClass::find($request->id);
        if($model){
            return ['code' => 200, 'msg' => __('common.Success'), 'data' => $model];
        }else{
            return ['code' => 50001, 'msg' => __('common.Server internal error')];
        }
    }
    
    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create(Request $request, DummyModelClass $DummyModelVariable)
    {
        $validator = Validator::make(
            $request->all(), 
            array_merge_recursive($DummyModelVariable->rules(), [DummyUniqueRule
            ]), 
            $DummyModelVariable->messages(), 
            $DummyModelVariable->customAttributes()
        );
        if ($validator->fails()) {
            return ['code' => 40001, 'msg' => $validator->errors()->first(), 'data' => $validator->errors()];
        }
        $DummyModelVariable->fill($user->onlyCustomAttributes($request->all()));
        if($DummyModelVariable->save())
        {
            return ['code' => 200, 'msg' => __('common.Success'), 'data' => $DummyModelVariable];
        }else{
            return ['code' => 50001, 'msg' => __('common.Server internal error')];
        }
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \DummyFullModelClass  $DummyModelVariable
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, DummyModelClass $DummyModelVariable)
    {
        $validator = Validator::make(
            $request->all(), 
            array_merge_recursive($DummyModelVariable->rules(), [
                'id' => ['required', 'integer', Rule::exists('DummyTableName')],DummyUniqueUpdateRule
            ]), 
            $DummyModelVariable->messages(), 
            $DummyModelVariable->customAttributes()
        );
        if ($validator->fails()) {
            return ['code' => 40001, 'msg' => $validator->errors()->first(), 'data' => $validator->errors()];
        }
        $model = $DummyModelVariable::where('id', $request->id);
        $data = $DummyModelVariable->onlyCustomAttributes($request->all());
        if($model->update($data))
        {
            return ['code' => 200, 'msg' => __('common.Success'), 'data' => $model->first()];
        }else{
            return ['code' => 50001, 'msg' => __('common.Server internal error')];
        }
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \DummyFullModelClass  $DummyModelVariable
     * @return \Illuminate\Http\Response
     */
    public function destroy(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'id' => ['required', 'array'],
        ]);
        if ($validator->fails()) {
            return ['code' => 40001, 'msg' => $validator->errors()->first(), 'data' => $validator->errors()];
        }
        $model = DummyModelClass::whereIn('DummyPrimaryKeyName', is_array($request->id) ? $request->id : [$request->id]);
        if($model->delete()){
            return ['code' => 200, 'msg' => __('common.Success')];
        }else{
            return ['code' => 50001, 'msg' => __('common.Server internal error')];
        }
    }
}
